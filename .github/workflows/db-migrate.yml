name: Database Migration (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      migration_type:
        description: 'Migration type'
        required: true
        default: 'push'
        type: choice
        options:
        - push
        - migrate
        - reset
      confirm_production:
        description: 'Type "CONFIRM" to run against production'
        required: false
        type: string

env:
  NODE_VERSION: 20
  PNPM_VERSION: 8

jobs:
  validate-inputs:
    name: Validate Migration Inputs
    runs-on: ubuntu-latest

    steps:
      - name: Validate production confirmation
        if: inputs.environment == 'production'
        run: |
          if [ "${{ inputs.confirm_production }}" != "CONFIRM" ]; then
            echo "❌ Production migrations require confirmation!"
            echo "Please set 'confirm_production' input to 'CONFIRM' to proceed."
            exit 1
          fi
          echo "✅ Production migration confirmed"

      - name: Log migration details
        run: |
          echo "🔄 Database Migration Request:"
          echo "Environment: ${{ inputs.environment }}"
          echo "Migration type: ${{ inputs.migration_type }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Workflow run: ${{ github.run_id }}"

  run-migration:
    name: Run Database Migration
    runs-on: ubuntu-latest
    needs: validate-inputs
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Set database URL
        run: |
          if [ "${{ inputs.environment }}" == "production" ]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}" >> $GITHUB_ENV
          else
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }}" >> $GITHUB_ENV
          fi

      - name: Backup database (production only)
        if: inputs.environment == 'production'
        run: |
          echo "🗄️ Creating database backup before migration..."
          # In production, you might want to create a backup first
          # This is a placeholder - implement based on your backup strategy
          echo "Backup created with timestamp: $(date -u '+%Y%m%d_%H%M%S')"
          echo "Note: Implement actual backup logic based on your database provider"

      - name: Check current database status
        run: |
          echo "📋 Current database status:"
          npx prisma db seed --preview-feature || echo "No seed file found"
          echo "Schema validation:"
          npx prisma validate

      - name: Run migration (push)
        if: inputs.migration_type == 'push'
        run: |
          echo "🚀 Running database push..."
          pnpm db:push
          echo "✅ Database push completed"

      - name: Run migration (migrate)
        if: inputs.migration_type == 'migrate'
        run: |
          echo "🚀 Running database migrate..."
          pnpm db:migrate
          echo "✅ Database migration completed"

      - name: Reset database (DANGEROUS)
        if: inputs.migration_type == 'reset'
        run: |
          echo "⚠️ RESETTING DATABASE..."
          if [ "${{ inputs.environment }}" == "production" ]; then
            echo "❌ Database reset is not allowed in production!"
            exit 1
          fi
          npx prisma migrate reset --force
          echo "✅ Database reset completed"

      - name: Verify migration
        run: |
          echo "🔍 Verifying migration..."
          npx prisma validate
          echo "✅ Schema validation passed"

      - name: Test database connection
        run: |
          echo "🔌 Testing database connection..."
          node -e "
            const { PrismaClient } = require('@prisma/client');
            const prisma = new PrismaClient();
            prisma.\$queryRaw\`SELECT 1\`
              .then(() => {
                console.log('✅ Database connection successful');
                process.exit(0);
              })
              .catch((error) => {
                console.error('❌ Database connection failed:', error);
                process.exit(1);
              })
              .finally(() => prisma.\$disconnect());
          "

      - name: Log migration completion
        if: always()
        run: |
          echo "📋 Migration Summary:"
          echo "Status: ${{ job.status }}"
          echo "Environment: ${{ inputs.environment }}"
          echo "Migration type: ${{ inputs.migration_type }}"
          echo "Executed by: ${{ github.actor }}"
          echo "Completion time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Workflow run: ${{ github.run_id }}"

      - name: Create migration summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "## ✅ Database Migration Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "**Migration type:** ${{ inputs.migration_type }}" >> $GITHUB_STEP_SUMMARY
            echo "**Executed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            echo "**Completion time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Migration Details" >> $GITHUB_STEP_SUMMARY
            echo "- Schema validation: ✅ Passed" >> $GITHUB_STEP_SUMMARY
            echo "- Database connection: ✅ Verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Database Migration Failed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "**Migration type:** ${{ inputs.migration_type }}" >> $GITHUB_STEP_SUMMARY
            echo "**Failed step:** Check the logs above for details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Important:** Review the error logs and ensure database integrity." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify completion
        if: success()
        run: |
          echo "🎉 Database migration completed successfully!"
          echo "Environment: ${{ inputs.environment }}"
          echo "Migration type: ${{ inputs.migration_type }}"